	#运行用户
    user www;    
    #启动进程,通常设置成和cpu的数量相等
    worker_processes  1;
 
    #全局错误日志及PID文件
    error_log  /var/log/nginx/error.log;
    pid        /var/run/nginx.pid;
 
    #工作模式及连接数上限
    events {
        use   epoll;             #epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能
        worker_connections  1024;#单个后台worker process进程的最大并发链接数
        #multi_accept on; 
    }
 
    #设定http服务器，利用它的反向代理功能提供负载均衡支持
    http {
         #设定mime类型,类型由mime.type文件定义
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
        #设定日志格式
        access_log    /var/log/nginx/access.log;
 
        #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，
        #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.
        sendfile        on;
        #tcp_nopush     on;
 
        #连接超时时间
        #keepalive_timeout  0;
        keepalive_timeout  65;
        tcp_nodelay        on;
        
        #开启gzip压缩
        gzip  on;
        gzip_disable "MSIE [1-6]\.(?!.*SV1)";
 
        #设定请求缓冲
        client_header_buffer_size    1k;
        large_client_header_buffers  4 4k;
		
		#隐藏版本号
		server_tokens off;

		server {
        #侦听80端口
            listen       80;
            #定义使用www.xx.com访问
            server_name  _;
 
            #设定本虚拟主机的访问日志
            access_log  off;
 
        #默认请求
        location / {
				root   /www;      #定义服务器的默认网站根目录位置
				index index.html index.htm;   #定义首页索引文件的名称
            }
 
        # 定义错误提示页面
        error_page   500 502 503 504 /50x.html;  
            location = /50x.html {
            root   /www;
        }
 
        
         }
    }